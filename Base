
class node:
    def __init__(self,input = None):
        self.truth = "h "
        self.next = None

class EP:
    def __init__(self):
        self.rules = {}
        self.inter = []
        self.root = None
        temp = int(input("Number of rules: "))
        for i in range(temp):
            rule_input = input("Enter rule: ")
            self.rules[rule_input] = node()
            self.rules[rule_input].truth += str(i)
            if i==0:
                self.root = rule_input
        self.create_linkage()
    def create_linkage(self):
        for R in self.rules.keys():
            check_inter = 0
            conclusion = self.remove_if_then(R)
            for J in self.rules.keys():
                if J != R:
                    premise = self.remove_if_then(J)
                    if premise[0] in conclusion[2:]:
                        print('does')
                        self.rules[R].next = self.rules[J]
                    if conclusion[0] in premise[2:]:
                        check_inter += 1
            if check_inter == 0:
                self.inter += [ self.remove_if_then(R)[0] ]
    def remove_if_then(self,word):
        return word.replace(' then ',' ').replace('if ','')
    def print_all_node(self):
        print(self.inter)
        n = self.rules[self.root]
        while n != None:
            print(n.truth)
            n = n.next
test = EP()
test.print_all_node()

