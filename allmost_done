class node:
    def __init__(self):
        self.truth = False
        self.next = {}

class inference:
    def __init__(self):
        self.rules = []
        self.node = {}
        self.root = None
        self.numb_rule = int(input("Number of rules: "))
        for i in range(self.numb_rule):
            rule_input = input("Enter rule: ")
            self.rules += [rule_input]
    def get_rules(self):
        return self.rules

class KB:
    def __init__(self):
        self.ifr = inference()
        self.rules = self.ifr.get_rules()
        self.each_node = {}
        self.__inter = []
        self.create_linkage()

    def create_linkage(self):
        for R in self.rules:
            check_inter = 0
            conclusion = self.remove_if_then(R)
            self.each_node[R] = node()
            for J in self.rules:
                if J != R:
                    self.each_node[J] = node()
                    premise = self.remove_if_then(J)
                    if premise[0] in conclusion[2:]:
                        self.each_node[J].next[premise[0]] = self.each_node[R]
                    if conclusion[0] in premise[2:]:
                        check_inter += 1
            if check_inter == 0:
                self.__inter += [ self.remove_if_then(R)[0] ]
    def remove_if_then(self,word):
        return word.replace(' then ',' ').replace('if ','')
    def print_all_node(self):
        print(self.__inter)
        n = self.rules[self.root]
        while n != None:
            print(n.truth)
            n = n.next
    def get_inter(self):
        return self.__inter


    def run_test(self):
        print(self.__inter)
        for R in self.rules:
            premise = self.remove_if_then(R)
            if premise[0] in self.__inter:
                msg = (input("True or False: "))
                if msg.lower() == "true":
                    self.each_node[R].truth = True
                    if self.each_node[R].next:
                        print(self.each_node[R].next)
                        self.each_node[R].next[premise[2]].truth = True
            else:
                print('do')
                temp = []
                for x in self.each_node[R].next:
                    print('did')
                    temp += [x]
                if len(set(temp)) == 1:
                    print('does')
                    self.each_node[R].truth = True
                if not self.each_node[R].next:
                    print(premise[2])
        else:
            print("Result wasn't found")



#main
#create data or rules
test = KB()
test.run_test()
